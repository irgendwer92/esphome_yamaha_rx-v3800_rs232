# Wifi, ota, logger, api, etc. einfügen

esphome:
  name: yamaha_rs232
  platform: ESP32
  board: esp32dev
  framework:
    type: esp-idf

external_components:
  - source: github://shawly/esphome-components
    components: [uart]

on_boot:
  priority: -10
  then:
    # "Ready" / Statusabruf – laut Doku soll der Host zu Beginn Status anfordern/synchronisieren
    - script.execute: { id: send_yamaha_command, code: "7A7F" }  # „Request Status“ (Hersteller-Doku)
on_boot:
  priority: -100
  then:
    - lambda: 'id(main_input_select).publish_state(id(input_state).state.c_str());'    
uart:
  id: yamaha_uart
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  parity: NONE
  stop_bits: 1
  rts_pin: GPIO18
  cts_pin: GPIO5
  hw_flowctrl: CTS_RTS
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes)

# Hilfsfunktion: sendet STX/ETX-umrahmte Kommandos
script:
  - id: send_yamaha_command
    parameters:
      code: string
    then:
      - uart.write: !lambda |-
          id(yamaha_uart).write_byte(0x02);
          id(yamaha_uart).write_str("0");
          id(yamaha_uart).write_str(code.c_str());
          id(yamaha_uart).write_byte(0x03);

# ===== POWER SCHALTER =====
switch:
  - platform: template
    name: "Main Power ON"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A1D"
  - platform: template
    name: "Main Power OFF"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A1E"

  - platform: template
    name: "Zone2 Power ON"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A2D"
  - platform: template
    name: "Zone2 Power OFF"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A2E"

  - platform: template
    name: "Zone3 Power ON"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A3D"
  - platform: template
    name: "Zone3 Power OFF"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A3E"

# ===== MUTE & VOLUME =====
switch:
  - platform: template
    name: "Main Mute ON"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A0F"
  - platform: template
    name: "Main Mute OFF"
    turn_on_action:
      - script.execute:
          id: send_yamaha_command
          code: "7A0E"

number:
  - platform: template
    name: "Main Volume"
    min_value: -80
    max_value: 16
    step: 0.5
    set_action:
      - lambda: |-
          int vol = (int)((x + 80) * 2);  // Umrechnen in Yamaha-Format
          char buf[5];
          sprintf(buf, "7A5%02X", vol & 0xFF);
          id(send_yamaha_command).execute(std::string(buf));
select:
# ===== INPUT SELECTOR =====
  - platform: template
    id: main_input_select
    name: "Main Input"
    optimistic: false
    options:
      - "PHONO"
      - "CD"
      - "TUNER"
      - "CD-R"
      - "MD/TAPE"
      - "DVD"
      - "D-TV/LD"
      - "CBL/SAT"
      - "SAT"
      - "VCR1"
      - "VCR2/DVR"
      - "VCR3"
      - "V-AUX"
    set_action:
      - lambda: |-
          // Operation commands (SW='0') per Protokoll-Tabelle:
          // 7A14 PHONO, 7A15 CD, 7A16 TUNER, 7A19 CD-R, 7AC9 MD/TAPE,
          // 7AC1 DVD, 7A54 D-TV/LD, 7AC0 CBL/SAT, 7ACA SAT, 7A0F VCR1,
          // 7A13 VCR2/DVR, 7AC8 VCR3, 7A55 V-AUX
          std::string s = x;
          std::string cmd;
          if (s=="PHONO") cmd="7A14";
          else if (s=="CD") cmd="7A15";
          else if (s=="TUNER") cmd="7A16";
          else if (s=="CD-R") cmd="7A19";
          else if (s=="MD/TAPE") cmd="7AC9";
          else if (s=="DVD") cmd="7AC1";
          else if (s=="D-TV/LD") cmd="7A54";
          else if (s=="CBL/SAT") cmd="7AC0";
          else if (s=="SAT") cmd="7ACA";
          else if (s=="VCR1") cmd="7A0F";
          else if (s=="VCR2/DVR") cmd="7A13";
          else if (s=="VCR3") cmd="7AC8";
          else if (s=="V-AUX") cmd="7A55";
          if (!cmd.empty()) id(send_yamaha_command).execute(cmd);

# ===== SURROUND PROGRAMME =====

  - platform: template
    name: "Surround Program"
    optimistic: true
    options:
      - "Straight"
      - "7ch Stereo"
      - "Adventure"
      - "Sci-Fi"
      - "Concert Hall"
      - "Sports"
      - "Drama"
      - "Mono Movie"
    set_action:
      - lambda: |-
          std::string s = x;
          std::string cmd;
          if (s == "Straight") cmd = "7A30";
          else if (s == "7ch Stereo") cmd = "7A31";
          else if (s == "Adventure") cmd = "7A32";
          else if (s == "Sci-Fi") cmd = "7A33";
          else if (s == "Concert Hall") cmd = "7A34";
          else if (s == "Sports") cmd = "7A35";
          else if (s == "Drama") cmd = "7A36";
          else if (s == "Mono Movie") cmd = "7A37";
          id(send_yamaha_command).execute(cmd);

# ===== OSD MENÜ UND NAVIGATION =====
button:
  - platform: template
    name: "Main Power ON"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7A1D" }   # Main ON
  - platform: template
    name: "Main Power OFF"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7A1E" }   # Main OFF

  - platform: template
    name: "Zone2 Power ON"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7EBA" }   # Z2 ON
  - platform: template
    name: "Zone2 Power OFF"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7EBB" }   # Z2 OFF

# === OSD STATUS (Anzeigeart) ===
  - platform: template
    name: "OSD Off"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7EB0" }
  - platform: template
    name: "OSD Short"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7EB1" }
  - platform: template
    name: "OSD Full"
    on_press:
      - script.execute: { id: send_yamaha_command, code: "7EB2" }
text_sensor:
  - platform: template
    id: input_state
    name: "Yamaha Input State"
    on_value:
      then:
        - lambda: |-
            if (!id(input_state).state.empty())
              id(main_input_select).publish_state(id(input_state).state.c_str());
  - platform: template
    id: zone2_input_state
    name: "Zone2 Input State"

  - platform: template
    id: surround_program_state
    name: "Surround Program"

  - platform: template
    id: osd_state
    name: "OSD Status"

  - platform: template
    id: last_report
    name: "Yamaha Report Raw"
    icon: mdi:console-line

binary_sensor:   
  - platform: template
    id: main_power_state
    name: "Main Power State"
    device_class: power

  - platform: template
    id: zone2_power_state
    name: "Zone2 Power State"
    device_class: power

  - platform: template
    id: zone3_power_state
    name: "Zone3 Power State (unspezifiziert)"
    device_class: power
    optimistic: true  # siehe Hinweis unten
sensor:
  - platform: template
    id: volume_state
    name: "Main Volume State"
    unit_of_measurement: "dB"
    accuracy_decimals: 1

  - platform: template
    id: zone2_volume_state
    name: "Zone2 Volume State"
    unit_of_measurement: "dB"
    accuracy_decimals: 1

on_uart_data:
  - id: yamaha_uart
    then:
      - lambda: |-
          static std::string buf;
          while (id(yamaha_uart).available()) {
            char c = id(yamaha_uart).read();
            if (c == 0x02) { buf.clear(); }
            else if (c == 0x03) {
              // kompletter Frame zwischen STX..ETX in buf
              id(last_report).publish_state(buf.c_str());

              // --- POWER (20) - kombiniert: 00 OFF/OFF, 01 ON/ON, 02 MAIN ON/Z2 OFF, 03 MAIN OFF/Z2 ON ---
              if (buf.rfind("20", 0) == 0 && buf.size() >= 4) {
                std::string d = buf.substr(2, 2);
                bool main_on=false, z2_on=false;
                if (d == "00") { main_on=false; z2_on=false; }
                else if (d == "01") { main_on=true; z2_on=true; }
                else if (d == "02") { main_on=true; z2_on=false; }
                else if (d == "03") { main_on=false; z2_on=true; }
                id(main_power_state).publish_state(main_on);
                id(zone2_power_state).publish_state(z2_on);
              } // :contentReference[oaicite:3]{index=3}

              // --- MAIN INPUT (21…) ---
              if (buf.rfind("21", 0) == 0) {
                // Format lt. Tabelle: x,y … wir mappen den rechten Nibble y auf Quelle:
                // PHONO=0, CD=1, TUNER=2, ..., V-AUX=C
                // Wir nehmen die letzten zwei Zeichen für die Quelle.
                std::string yy = buf.substr(buf.size()-2, 2);
                std::string name;
                if (yy == "00") name="PHONO";
                else if (yy=="01") name="CD";
                else if (yy=="02") name="TUNER";
                else if (yy=="03") name="CD-R";
                else if (yy=="04") name="MD/TAPE";
                else if (yy=="05") name="DVD";
                else if (yy=="06") name="D-TV/LD";
                else if (yy=="07") name="CBL/SAT";
                else if (yy=="08") name="SAT";
                else if (yy=="09") name="VCR1";
                else if (yy=="0A"||yy=="0a") name="VCR2/DVR";
                else if (yy=="0C"||yy=="0c") name="V-AUX";
                if (!name.empty()) id(input_state).publish_state(name.c_str());
              } // :contentReference[oaicite:4]{index=4}

              // --- MAIN MUTE (23) ---
              if (buf.rfind("23", 0) == 0 && buf.size() >= 4) {
                // 00 OFF, 01 ON (wir könnten bei Bedarf einen Binary-Sensor ergänzen)
              } // :contentReference[oaicite:5]{index=5}

              // --- ZONE2 INPUT (24) ---
              if (buf.rfind("24", 0) == 0 && buf.size() >= 4) {
                std::string d = buf.substr(2, 2);
                std::string name;
                if (d=="00") name="PHONO";
                else if (d=="01") name="CD";
                else if (d=="02") name="TUNER";
                else if (d=="03") name="CD-R";
                else if (d=="04") name="MD/TAPE";
                else if (d=="05") name="DVD";
                else if (d=="06") name="D-TV/LD";
                else if (d=="07") name="CBL/SAT";
                else if (d=="08") name="SAT";
                else if (d=="09") name="VCR1";
                else if (d=="0A"||d=="0a") name="VCR2/DVR";
                else if (d=="0C"||d=="0c") name="V-AUX";
                if (!name.empty()) id(zone2_input_state).publish_state(name.c_str());
              } // :contentReference[oaicite:6]{index=6}

              // --- ZONE2 MUTE (25) ---
              if (buf.rfind("25", 0) == 0 && buf.size() >= 4) {
                // 00 OFF, 01 ON (füge bei Bedarf einen Binary-Sensor hinzu)
              } // :contentReference[oaicite:7]{index=7}

              // --- MAIN VOLUME (26) -> dB ---
              if (buf.rfind("26", 0) == 0 && buf.size() >= 4) {
                int hex = strtol(buf.substr(2,2).c_str(), nullptr, 16);
                float db = (hex / 2.0f) - 80.0f;
                id(volume_state).publish_state(db);
              } // :contentReference[oaicite:8]{index=8}

              // --- ZONE2 VOLUME (27) -> dB ---
              if (buf.rfind("27", 0) == 0 && buf.size() >= 4) {
                int hex = strtol(buf.substr(2,2).c_str(), nullptr, 16);
                float db = (hex / 2.0f) - 80.0f;
                id(zone2_volume_state).publish_state(db);
              } // :contentReference[oaicite:9]{index=9}

              // --- SURROUND PROGRAM (28) ---
              if (buf.rfind("28", 0) == 0 && buf.size() >= 4) {
                std::string d = buf.substr(2, 2);
                std::string prog;
                // Auszug der langen Liste (Konzerthallen, Kinos, PLII/Neo6 etc.)
                if (d=="00") prog="Hall A (HALL1)";
                else if (d=="01") prog="Hall B";
                else if (d=="02") prog="Hall C";
                else if (d=="10") prog="The Roxy Theater";
                else if (d=="11") prog="Warehouse Loft";
                else if (d=="12") prog="Arena";
                else if (d=="14") prog="Disco";
                else if (d=="15") prog="Party";
                else if (d=="16") prog="Game";
                else if (d=="17") prog="6/8CH Stereo";
                else if (d=="18") prog="Pop/Rock";
                else if (d=="19") prog="DJ";
                else if (d=="1C") prog="Opera";
                else if (d=="1D") prog="Pavillion";
                else if (d=="20") prog="Mono Movie";
                else if (d=="21") prog="Variety Sports";
                else if (d=="24") prog="Spectacle";
                else if (d=="25") prog="Sci-Fi";
                else if (d=="28") prog="Adventure";
                else if (d=="29") prog="General";
                else if (d=="2C") prog="Normal";
                else if (d=="2D") prog="Enhanced";
                else if (d=="30") prog="PLII Movie";
                else if (d=="31") prog="PLII Music";
                else if (d=="32") prog="Neo:6 Movie";
                else if (d=="33") prog="Neo:6 Music";
                // 80–83 = Stereo Varianten / „Effect off“
                else if (d=="80") prog="Stereo (Hall A)";
                else if (d=="81") prog="Stereo (Hall B)";
                else if (d=="82") prog="Stereo (Hall C)";
                else if (d=="83") prog="Stereo (Neo:6 Music)";
                if (!prog.empty()) id(surround_program_state).publish_state(prog.c_str());
              } // :contentReference[oaicite:10]{index=10}

              // --- OSD STATUS (2B) ---
              if (buf.rfind("2B", 0) == 0 && buf.size() >= 4) {
                std::string d = buf.substr(2,2);
                const char* s = (d=="00") ? "Full" : (d=="01") ? "Short" : (d=="02") ? "Off" : "";
                if (*s) id(osd_state).publish_state(s);
              } // :contentReference[oaicite:11]{index=11}

              buf.clear();
            } else {
              buf += c;
            }
          }
